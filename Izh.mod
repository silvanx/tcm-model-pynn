COMMENT
This implementation assumes a single compartment with cm 1 uf/cm2.
Based in part on spikeout.mod from the NEURON code for Brette et. al.

Implements the basic currents needed by the Izhikevich model cell.
Includes a built-in current source that generates the "test current" I 
that is handy for demonstrating the cell's spiking properties.
Other injected currents, and synaptic currents, are to be implemented 
by the user as point processes (IClamp and synaptic mechanisms, respectively).

Also has a user-specifiable "refractory period" specified by refrac 
(a range variable), during which the model is unresponsive to new inputs 
because of a large shunt that holds v at the reset potential.
The shunt conductance is specified by global variable grefrac_Izh. 

Why is this implemented as a point process?
-------------------------------------------

Why not a density mechanism, or partly as a density mechanism 
and partly as a point process?

A density mechanism would seem most natural, if only because it would avoid 
the necessity of scaling the current to compartment surface area.
However, the Izhikevich model is an integrate and fire model, with a hard 
threshold for spike detection, and both v and state variable u are forced 
to change abruptly whenever a spike occurs.
This required using a point process with a NET_RECEIVE block that contains 
a WATCH statement and appropriate logic to drive the jumps in v and u.
With all this specified in a point process, why bother factoring anything 
into a density mechanism?  Keeping everything in the point process 
also simplifies the task of ensuring consistency of units.

Current scaling
---------------

In the original implementation by Izhikevich, the right hand side of
  v' = e*v^2 + f*v + g - u + I
is the sum of net "ionic transmembrane current" and injected current I.
Izhikevich selected parameters so that v is in mV and time is in ms.

It is convenient for the NEURON implementation to preserve Izhikevich's notation, 
but in order for v' to be correct, the current generated by this mechanism 
must be scaled so that it has the proper proportionality to total surface area.

Why?

Consider this example:
If the right hand side of I's equation has numerical value 1, so v' should be 1 mV/ms.
However, if the NEURON implementation treats the right hand side as if its units are nA,
and the mechanism is attached to a model cell that has cm 1 uf/cm2 and surface area 100 um2, 
v' will be 1000 mV/ms (net capacitance of the cell is 1 pf, so 1 pA makes v' 1 mV/ms 
and 1 nA makes v' 1000 mV/ms).

So the current generated by this mechanism is calculated 
by multiplying the right hand side by a scale factor called ka.
If a cell with cm 1 uf/cm2 and surface area 100 um2 
needs ka to be 1e-3, then a cell with cm 1 uf/cm2 and
cell surface area  needs  this ka 
      200 um2               2e-3
     1000 um2               1e-2
     area um2             area*1e-5
And if the value of specific membrane capacitance is cm uf/cm2, 
then ka must equal area*cm*1e-5.
The area of the current segment (in um2) is known in NMODL as area,
so the user doesn't have to specify area as a parameter.
However, NMODL has no way to determine the value of cm, 
so cm must be a range variable.


Cell behavior:
           a     b    c   d   e     f    g      I
Class 1   0.02 -0.1  -55  6  0.04  4.1  108  >=0.3412
Class 2   0.2   0.26 -65  0  0.04   5   140  >=2.2502
ENDCOMMENT

NEURON {
  POINT_PROCESS Izh
  NONSPECIFIC_CURRENT i
  RANGE a, b, c, d, e, f, g, thresh
  RANGE refrac
  RANGE del, dur, amp, I : for built-in current pulse generator
    : so that one can test this mechanism's behavior
    : using the same parameter values as in Izhikevich's papers
  RANGE Cm
}

UNITS {
  (nA) = (nanoamp)
  (mV) = (millivolt)
  (S) = (siemens)
  (uS) = (microS)
  (um) = (micron)
  (uf) = (microfarad)
}

PARAMETER {
  a = 0.02  (/ms)
  b = 0.2   (uS)
  c = -65   (mV)
  d = 2     (nA)
  e = 0.04  (uS/mV)
  f = 5     (uS)
  g = 140   (nA)
  thresh = 30 (mV)
  refrac = 0 (ms) : duration of refractory interval
  grefrac = 1e9 (uS)
  del = 0   (ms)
  dur = 0   (ms)
  amp = 0   (nA)
  Cm = 1    (uf/cm2)
}

ASSIGNED {
  v (mV)
  i (nA)
  Ion (1)
  I (nA)
  isrefrac (1)
  area (um2) : segment area
  ka (1)
}

STATE {
  u (nA)
}

BREAKPOINT {
:  SOLVE states METHOD cnexp
: use derivimplicit because u' is coupled to v, which is another state
  SOLVE states METHOD derivimplicit
  i = -(v*(e*v + f) + g + I) + u
  if (isrefrac) {
    i = grefrac*(v - c)
  }
  i = ka * i
}

DERIVATIVE states {
  u' = a*(b*v - u)
}

INITIAL {
  ka = area*Cm*1e-5 (cm2/uf um2) : force current to be proportional to surface area
  v = c
  u = b*c
  I = 0
  Ion = 0
  isrefrac = 0
  net_send(0, 3) : activate WATCH
}

NET_RECEIVE(w) {
  if (flag == 1) { : spike happened!
: this should not generate its own output event!
: it's a "biophysical model cell" because it uses a section
: that integrates synaptic and "membrane" currents,
: and the section's v should be monitored by a NetCon!
:    net_event(t)
    if (refrac>0) {
      net_send(refrac, 2)
      isrefrac = 1
    }
    v = c
    u = u + d
  } else if (flag == 2) { : terminate refractory interval
    isrefrac = 0
  } else if (flag == 3) { : initialize WATCH and set up for I
    WATCH (v > thresh) 1
    net_send(del, 4) : prepare to turn I on
  } else if (flag == 4) { : toggle I on and off
    if (Ion==0) {
      Ion = 1
      net_send(dur, 4) : prepare to turn I off
    } else {
      Ion = 0
    }
    I = amp*Ion
  }
}

